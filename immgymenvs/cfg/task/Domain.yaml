name: Domain

physics_engine: ${..physics_engine}

# if given, will override the device setting in gym. 
env:
  numEnvs: ${resolve_default:24576,${...num_envs}}
  envSpacing: 1
  episodeLength: 300
  enableDebugVis: False
  extract_successes: False
  seed: ${...seed}
  smoothing_coefficient: 1.0 # 1.0 means smoothing action is OFF
  clipObservations: 5.0
  clipActions: 1.0
  keypoint: 
    activate: true
    num: 8
  startPositionNoise: 0.0
  startRotationNoise: 0.0
  asymmetric_obs: false
  normalize_obs: true
  normalize_action: true
  cube_obs_keypoints: true
  reset_distribution:
    object_initial_state:
      type: pre_contact_policy
  reward_terms:
    gripper_reach_object_rate:
        activate: true
        norm_p: 2
        weight: -10
    object_dist:
      activate: true
      weight1: 0.02 
      weight2: 1000
      th: 0.01
      epsilon: 0.02
    object_rot:
      activate: true
      weight1: 0.05
      weight2: 1000
      th: 0.1
      epsilon: 0.02
    obejct_move:
      activate: false
      weight1: 10
      weight2: 300
  camera:
    size: [240, 320] # [height, width]
    position: [0.96, 0, 0.86]
    angle: 43
    segmentation: True
  student_obs: False
  restrict_gripper: True
  scene_randomization: 
    background: False
    camera: False
    table: False
    light: False
  inductive_reward: ${eq:${...train.method},"inductive_reward"}
  controlFrequencyInv: 10
  controller: osc
  energy_reward: False
  hand_force_limit: False
  initial_dof_pos_limit: 0.0
  adaptive_dof_pos_limit:
    activate: False
    threshold_success_rate: 0.90
    bucket: 10 # dof pos limit offset is increased by same (max-init)/bucket
    maximum: 0.05
  initial_dof_vel_limit: 0.00
  adaptive_dof_vel_limit:
    activate: False
    threshold_success_rate: 0.90
    bucket: 10 # dof vel limit offset is increased by same (max-init)/bucket
    maximum: 0.05
  initial_residual_scale: [0.06, 0.10] # [maximum residual position, maximum residual orientation]
  adaptive_residual_scale:
    activate: False
    bucket: 10 # residual scale is reduced by same ratio for #bucket times
    threshold_success_rate: 0.80
    minimum: [0.02, 0.03]

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

  # set to True if you want to render photorealistic image
  nvisii:
    photorealistic_rendering: False
    table_reflection: False
    ambient_intensity: 0.8
    table_texture: "None" # possible table textures = ["marble", "colored_marble", "wood", "white_wood"]

sim:
  dt: 0.01 # 100Hz
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 12
    num_velocity_iterations: 1
    contact_offset: 0.001
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 1000.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 10000000 # 1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 2 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)

task:
  random_external_force: False
  #   interval_timestep: 50
  #   max_force: 
  #   decay: 
  observation_randomize: False
  image_randomize: False
  env_randomize: False
  torque_randomize: False
  camera_randomize: False
  randomization_params:
    # table_height: # table height is randomized when env_randomize is True.
    #   range: [-0.01, 0.01]
    #   operation: "additive"
    #   distribution: "uniform"
    frequency: 1   # Define how many simulation steps between generating new randomizations
    observations:
      range: [0.0, 0.01] # range for the white noise
      # range_correlated: [0, .001 ] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
    keypoints:
      range: [0.0, 0.03] # range for the white noise
      # range_correlated: [0, .001 ] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
    image: "None"
    camera:
      fov: True
      transform: True
    # actions:
    #   range: [0., .05]
    #   range_correlated: [0, .015] # range for correlated noise, refreshed with freq `frequency`
    #   operation: "additive"
    #   distribution: "gaussian"
      # schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
      # schedule_steps: 40000
    #sim_params: 
    #  gravity:
    #    range: [0, 0.4]
    #    operation: "additive"
    #    distribution: "gaussian"
        # schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        # schedule_steps: 40000
    actor_params:
      robot:
        rigid_shape_properties: 
          friction: 
            range: [0.9, 1.1]
            operation: "scaling"
            distribution: "uniform"
            num_buckets: 40
        # dof_properties: 
        #   friction: 
        #     range: [0.1, 2.]
        #     operation: "scaling"
        #     distribution: "uniform"
        #   damping:
        #     range: [0.1, 2.]
        #     operation: "scaling"
        #     distribution: "uniform"
      object:
        # scale:
        #   range: [0.9, 1.1]
        #   operation: "scaling"
        #   distribution: "uniform"
        #   setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
          # schedule: "linear"  # "linear" will scale the current random sample by ``min(current num steps, schedule_steps) / schedule_steps`
          # schedule_steps: 30000
        # rigid_shape_properties: 
        #   friction: 
        #     range: [0.7, 1.3]
        #     operation: "scaling"
        #     distribution: "uniform"
        #     setup_only: True
        rigid_body_properties:
          mass: 
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
    torque:
      range: [0.0, 0.03] # [mu, var]
      operation: "simulate_real"
      distribution: "gaussian"
